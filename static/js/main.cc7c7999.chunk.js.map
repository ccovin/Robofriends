{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","components/MainPage.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","searchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","MainPage","filterRobots","filter","robot","toLowerCase","includes","searchField","onRequestRobots","onSearchChange","isPending","SearchBox","App","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cc7c7999.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`}  />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card \r\n              key={robots[i].id} \r\n              id={robots[i].id} \r\n              name={robots[i].name} \r\n              email={robots[i].email}\r\n            />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst searchBox = ({searchChange}) => {\r\n  return (\r\n   <div>\r\n     <input\r\n        aria-label=\"Search Robots\"\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search' \r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n     />\r\n   </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default searchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\ncomponentDidCatch(error, info) {\r\n  this.setState({ hasError: true})\r\n}\r\n\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oooops, an error has occurred.</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\n\r\nclass CounterButton extends Component {\r\n  constructor() {\r\n    super();\r\n      this.state = {\r\n        count: 0\r\n      }\r\n  }\r\n  \r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.state.count !== nextState.count) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  updateCount = () => {\r\n    this.setState(state => {\r\n      return {count: state.count +1}\r\n    })\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <button \r\n        className=\"ma2\" \r\n        id='counter'\r\n        color={this.props.color} \r\n        onClick={this.updateCount}>\r\n        Count: {this.state.count}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return false;\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <CounterButton color='red'/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport Header from '../components/Header';\r\nimport './MainPage.css';\r\n\r\n\r\n\r\n\r\nclass MainPage extends Component {\r\n  \r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n    }\r\n\r\n  filterRobots = () => {\r\n    return this.props.robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\r\n    })\r\n  }\r\n  render () {\r\n    const { onSearchChange, robots, isPending} = this.props;\r\n    \r\n    return (\r\n        <div className='tc'>\r\n          <Header />\r\n          <SearchBox searchChange={onSearchChange}/>\r\n          <Scroll>\r\n            {isPending ? <h1>Loading</h1> :\r\n              <ErrorBoundary>\r\n                <CardList robots={this.filterRobots()}/>\r\n              </ErrorBoundary>\r\n            }\r\n          </Scroll>\r\n           \r\n        </div>\r\n      );\r\n    \r\n  } \r\n}\r\n\r\nexport default MainPage;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MainPage from '../components/MainPage';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  render () {\r\n    return <MainPage { ...this.props }/>\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=> response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch(action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, {searchField:action.payload})\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch(action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true})\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n      case REQUEST_ROBOTS_FAILED:\r\n          return Object.assign({}, state, { error: action.payload, isPending: false })\r\n      default:\r\n        return state;\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware,logger))\n\nReactDOM.render(\n                <Provider store={store}>\n                    <App />\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}